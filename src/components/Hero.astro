---
import { hallOfFame } from "../data/index";

type HallOfFameMember = {
  nickname: string;
  link: string;
  role: string;
  bio: string;
  tag: string;
  img: string;
};

const heroFaces: HallOfFameMember[] = (hallOfFame as HallOfFameMember[]).slice(0, 6);
const gridPairs: HallOfFameMember[][] = Array.from(
  { length: Math.ceil(heroFaces.length / 2) },
  (_, idx) => heroFaces.slice(idx * 2, idx * 2 + 2)
);
---

<section
  id="hero"
  class="min-h-[92vh] grid place-items-center relative overflow-hidden"
>
  <div
    class="pointer-events-none absolute inset-0 bg-[radial-gradient(60%_60%_at_50%_0%,rgba(159,254,136,0.15)_0%,transparent_60%)]"
  >
  </div>
  <div class="pointer-events-none absolute inset-0 opacity-20 [background:repeating-linear-gradient(110deg,rgba(244,244,244,0.11)_0,rgba(244,244,244,0.11)_2px,transparent_2px,transparent_14px),linear-gradient(110deg,transparent_0,transparent_40%,rgba(159,254,136,0.18)_48%,transparent_56%)] [background-size:14px_14px,200%_100%] animate-[speed_22s_linear_infinite]"></div>
  <!-- subtle grid lines for depth -->
  <div class="pointer-events-none absolute inset-0 opacity-[0.06] [background-image:linear-gradient(rgba(255,255,255,0.06)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.06)_1px,transparent_1px)] [background-size:40px_40px]"></div>

  <div class="container-px grid gap-10 md:grid-cols-12 items-center">
    <div class="md:col-span-7 order-1 md:order-1 text-center md:text-left">
      <div class="inline-flex items-center gap-2 text-xs tracking-widest uppercase text-white/60">
        <span class="h-1 w-4 bg-[#9FFE88] inline-block rounded"></span>
        D‑A‑CH Sim‑Racing Liga
      </div>
      <h1 class="display mt-3 text-5xl sm:text-7xl md:text-8xl font-extrabold leading-[0.95] tracking-[0.02em] uppercase">
        MXL Legacy
      </h1>
      <p class="mt-4 text-md md:text-lg text-white/85 max-w-2xl">
        Präzision, Rivalität, Gemeinschaft – von einem Monza‑Kickoff zu vollen Grids und einer Ära, die Spuren hinterlassen hat.
      </p>

      <div class="mt-7 flex flex-wrap gap-3 justify-center md:justify-start">
        <a
          href="#hall-of-fame"
          class="inline-block rounded bg-[#9FFE88] text-[#201D1F] px-5 py-3 font-medium hover:opacity-90"
        >Hall of Fame ansehen</a>
        <a
          href="/about"
          class="inline-block rounded border border-[#F4F4F4]/20 px-5 py-3 font-medium hover:bg-[#F4F4F4]/10"
        >Über das Projekt</a>
      </div>

      <!-- faces marquee to humanize hero -->
      {/*
      <div class="mt-6 overflow-hidden">
        <div class="flex items-center gap-3 animate-[marquee_24s_linear_infinite] will-change-transform" style="--marquee-dup:2">
          {heroFaces.concat(heroFaces).map((p, i) => (
            <a href={`/hall-of-fame/${p.link}`} class="shrink-0 inline-flex items-center gap-3 px-3 py-2 rounded-full bg-white/5 border border-white/10 hover:border-[#9FFE88]/40">
              <img src={p.img} alt={p.nickname} class="h-7 w-7 rounded-full object-cover" loading="lazy" decoding="async" />
              <span class="text-xs text-white/80">{p.nickname}</span>
            </a>
          ))}
        </div>
      </div>*/}
    </div>

    <!-- Hero visual column: Starting Grid animation -->
    <div class="md:col-span-5 order-2 md:order-2 w-full">
      <div class="relative mx-auto w-full max-w-md">
        <div class="absolute -inset-2 rounded-3xl bg-gradient-to-br from-[#9FFE88]/20 to-transparent blur-2xl"></div>
        <div class="relative rounded-2xl border border-white/10 bg-white/5 p-6 backdrop-blur overflow-hidden">
          <!-- Track background and lane markers -->
          <div class="pointer-events-none absolute inset-0 opacity-[0.10] [background-image:linear-gradient(rgba(255,255,255,0.10)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.10)_1px,transparent_1px)] [background-size:32px_32px]"></div>
          

          <!-- One-row starting grid stage -->
          <div class="relative mx-auto w-full max-w-sm h-40 sm:h-44 md:h-48" style={`--pairs:${gridPairs.length}; --step:10s; --stagger: calc(var(--step) - 4s)`}>
            <!-- Center highlight slot -->
            {/*<div class="pointer-events-none absolute inset-0 rounded-xl border border-white/10"></div>*/}
            <!-- Static U-shaped grid slots -->
            <div class="absolute inset-0 px-5 md:px-4 grid grid-cols-2 gap-4 items-end pointer-events-none z-0 content-center">
              <div class="h-16 sm:h-20 md:h-24 border-l-2 border-r-2 border-t-2 border-white/50 rounded-t-2xl"></div>
              <div class="h-16 sm:h-20 md:h-24 border-l-2 border-r-2 border-t-2 border-white/50 rounded-t-2xl"></div>
            </div>
            <div class="relative h-full overflow-hidden grid-stage">
              {gridPairs.map((pair, i) => (
                <div class="pair absolute inset-0 grid grid-cols-2 gap-3 sm:gap-6 md:gap-8 items-end px-4 md:px-6 z-10 -mt-4 sm:-mt-6 md:-mt-9" style={`--i:${i}`}>
                  {pair.map((p, j) => (
                    <a href={`/hall-of-fame/${p.link}`} class={`group inline-flex items-center gap-2 sm:gap-3 w-full rounded-xl border border-white/10 bg-white/10 backdrop-blur-sm px-0 py-0 transition-colors hover:border-[#9FFE88]/40 ${j === 0 ? 'justify-self-start' : 'justify-self-end'} self-center`}>
                      <img src={p.img} alt={p.nickname} class="h-9 w-9 sm:h-10 sm:w-10 rounded-l-xl object-cover ring-0 ring-white/10 group-hover:ring-[#9FFE88]/40" loading="lazy" decoding="async" />
                      <div class="min-w-0 text-xs sm:text-sm font-medium text-white/90 truncate">{p.nickname}</div>
                    </a>
                  ))}
                </div>
              ))}
            </div>
          </div>

           <!-- Legend -->
           <div class="mt-4 text-xs text-white/60">
            Die Startaufstellung der MXL
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Stats ribbon -->
  <div class="md:absolute md:left-0 md:right-0 md:bottom-6 mt-8 sm:mt-10">
    <div class="container-px">
      <div class="relative rounded-xl border border-white/10 bg-white/5 backdrop-blur py-3">
        <div class="pointer-events-none absolute inset-y-0 left-[-30%] w-[28%] bg-[linear-gradient(90deg,transparent,rgba(159,254,136,0.18),transparent)] animate-[shine_6s_linear_infinite]"></div>
        <ul class="nums grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3 text-center md:text-left text-sm">
          <li class="px-4">
            <div class="text-white/60 uppercase text-[10px] tracking-widest">Kickoff</div>
            <div class="font-semibold">Monza‑Start</div>
          </li>
          <li class="px-4">
            <div class="text-white/60 uppercase text-[10px] tracking-widest">Peak</div>
            <div class="font-semibold">100+ Fahrer</div>
          </li>
          <li class="px-4">
            <div class="text-white/60 uppercase text-[10px] tracking-widest">Ära</div>
            <div class="font-semibold">ProSeries</div>
          </li>
          <li class="px-4">
            <div class="text-white/60 uppercase text-[10px] tracking-widest">Kern</div>
            <div class="font-semibold">Community‑getrieben</div>
          </li>
          <li class="hidden md:block px-4">
            <div class="text-white/60 uppercase text-[10px] tracking-widest">Entdecke</div>
            <div class="font-semibold">Hall of Fame · Zeitleiste</div>
          </li>
        </ul>
      </div>
    </div>
  </div>
</section>

<style>
  @keyframes speed {
    0% { background-position: 0 0, 0 0; }
    100% { background-position: 200% 0, 0 0; }
  }
  @keyframes shine {
    0% { left: -30%; }
    100% { left: 130%; }
  }

    /* Starting grid animation: each pair slides in from bottom, holds, then exits up */
    #hero .grid-stage { --cycle: calc(var(--pairs) * var(--stagger, var(--step))); }
    #hero .pair {
      animation-name: gridCycle;
      animation-duration: var(--cycle);
      animation-timing-function: linear;
      animation-iteration-count: infinite;
      /* Use negative delay so offsets persist across loops */
      animation-delay: calc(var(--i) * var(--stagger, var(--step)) * -1);
      will-change: transform, opacity;
    }
    @keyframes gridCycle {
      0% { transform: translateY(100%); opacity: 0; }
      5% { transform: translateY(0%); opacity: 1; }
      35% { transform: translateY(0%); opacity: 1; }
      42% { transform: translateY(-100%); opacity: 0; }
      100% { transform: translateY(-100%); opacity: 0; }
    }
  @media (prefers-reduced-motion: reduce) {
    #hero .animate-\[speed_22s_linear_infinite\],
      #hero .animate-\[shine_6s_linear_infinite\],
      #hero .pair { animation: none !important; }
      #hero .grid-stage { position: relative; }
      #hero .pair { opacity: 0; }
      #hero .pair:first-of-type { opacity: 1; transform: none; position: absolute; inset: 0; }
  }
</style>
